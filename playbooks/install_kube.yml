---
- name: Install and configure all services
  hosts: all
  become: true
  tasks:

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Installing Prerequisites for Kubernetes microk8s
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - curl
          - gnupg-agent
          - vim
          - software-properties-common
        state: present

    - name: install APT Transport HTTPS
      apt:
        name: apt-transport-https
        state: present
    
- name: Install microk8s
  become: yes
  hosts: all
  tasks:
    - community.general.snap:
        classic: true
        channel: 1.26
        name:
          - microk8s

- name: Adding user to group
  become: yes
  hosts: microk8s
  tasks:
    - user:
        name: administrator
        groups: administrator
        append: yes
    - meta: reset_connection

- name: Change kube folder ownership
  become: yes
  hosts: microk8s
  tasks:
    - file:
        path: /home/administrator/.kube
        owner: administrator
        group: administrator
        state: directory

- name: Enable microk8s common modules
  hosts: microk8s
  tasks: 
    - command: microk8s enable dns cert-manager ingress hostpath-storage
      become: yes

- name: Install docker
  hosts: all
  become: true
  tasks:

    - name: add Docker apt-key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker-apt-keyring.asc
        mode: '0644'
        force: true

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present
    
    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
         - docker-ce 
         - docker-ce-cli 
         - containerd.io
      notify:
        - docker status
    
    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: install Containerd
      apt:
        name: containerd.io
        state: present

    - name: create Containerd directory
      file:
        path: /etc/containerd
        state: directory

    - name: add Containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml

    - name: configuring the systemd cgroup driver for Containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '            SystemdCgroup = false'
        line: '            SystemdCgroup = true'

    - name: enable the Containerd service and start it
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon-reload: yes

- name: Configure MongoDB Repository
  hosts: workers
  become: true
  vars_files:
    - vars_mongo.yml
  tasks:
    - name: Download MongoDB public key
      get_url:
        url: https://www.mongodb.org/static/pgp/server-7.0.asc
        dest: /tmp/mongodb-server-7.0.asc

    - name: Add MongoDB APT keyring
      shell: "sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg /tmp/mongodb-server-7.0.asc"
      args:
        executable: /bin/bash
  
    - name: Add MongoDB APT repository
      become: true
      lineinfile:
        path: /etc/apt/sources.list.d/mongodb-org-7.0.list
        line: "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse"
        create: yes
        
- name: install mongodb
  hosts: workers     
  become: yes

  vars_files:
    - vars_mongo.yml

  tasks:

    - name: Check Ubuntu version
      command: lsb_release -rs
      register: ubuntu_version

    - name: Installing dependancies
      package:
         name: "{{item}}"
         state: present
         update_cache: yes
      loop:
        - curl
        - gnupg
        - python3-pip
      become: yes

    - name: Install pymongo
      pip:
        name: pymongo

    - name: Check if MongoDB APT keyring exists
      stat:
        path: /usr/share/keyrings/mongo-key.gpg
      register: mongo_keyring_exists

    - name: Check if MongoDB repository exists
      stat:
        path: /etc/apt/sources.list.d/mongodb-org-{{ mongodb_version }}.list
      register: mongo_repository_exists

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install MongoDB packages
      apt:
        name: mongodb-org
        state: latest

    - name: Enable and start MongoDB service
      service:
        name: mongod
        state: started
        enabled: yes

    - name: Create MongoDB root user
      mongodb_user:
          login_port: "27017"
          database: "admin"
          name: "{{ mongodb_root_user }}"
          password: "{{ mongodb_root_password }}"
          roles: "root"

    - name: Enable remote connections in MongoDB
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^ *bindIp:.*'
        line: '  bindIp: 0.0.0.0'
        state: present
        backup: yes
      notify:
        - Restart MongoDB Service

    - name: Enable authentication in MongoDB
      lineinfile:
        path: /etc/mongod.conf
        line: "security:\n  authorization: enabled"
        insertafter: "^#security:"
        state: present
        backup: yes
      notify: 
        - Restart MongoDB Service

    - name: Ensure mongodb is running and and enabled to start automatically on reboots
      service: 
        name: mongod 
        enabled: yes
        state: started

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Enable and start MongoDB service
      service:
        name: mongod
        state: started
        enabled: yes

  handlers:
    - name: Restart MongoDB Service
      service:
        name: mongod
        state: restarted

    - name: Enable remote connections in MongoDB
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^ *bindIp:.*'
        line: '  bindIp: 0.0.0.0'
        state: present
        backup: yes
      notify:
        - Restart MongoDB Service

    - name: Enable authentication in MongoDB
      lineinfile:
        path: /etc/mongod.conf
        line: "security:\n  authorization: enabled"
        insertafter: "^#security:"
        state: present
        backup: yes
      notify:
        - Restart MongoDB Service

- name: Install Postgresql, Minio, NFS Server and Keycloak
  hosts: workers
  become: true
  tasks:

    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: present

    - name: Start and enable PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Download Minio Server package
      get_url:
        url: https://dl.min.io/server/minio/release/linux-amd64/archive/minio_20240307004348.0.0_amd64.deb
        dest: /tmp/minio.deb

    - name: Install Minio Server
      apt:
        deb: /tmp/minio.deb

    - name: Create Minio Server directory
      file:
        path: ~/minio
        state: directory

    - name: Download Minio Client
      get_url:
        url: https://dl.min.io/client/mc/release/linux-amd64/mc
        dest: /usr/local/bin/mc
        mode: "0755"

    - name: Install NFS Server
      apt:
        name: nfs-kernel-server
        state: present

    - name: Start NFS server
      service:
        name: nfs-kernel-server
        state: started
        enabled: yes

    - name: Install OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present

    - name: Create directory for Keycloak
      file:
        path: /opt/keycloak
        state: directory

    - name: Download Keycloak ZIP file
      get_url:
        url: https://github.com/keycloak/keycloak/releases/download/24.0.1/keycloak-24.0.1.zip
        dest: /tmp/keycloak-24.0.1.zip

    - name: Unzip Keycloak file
      shell: >
        unzip -o /tmp/keycloak-24.0.1.zip -d /opt/keycloak
      args:
        executable: /bin/bash

    - name: Remove Keycloak ZIP file
      file:
        path: /tmp/keycloak-24.0.1.zip
        state: absent


#- hosts: all
 # become: true
  #tasks:

   # - name: Reboot all the kubernetes nodes.
    #  reboot:
     #   post_reboot_delay: 10
      #  reboot_timeout: 40
       # connect_timeout: 60
        #test_command: uptime
